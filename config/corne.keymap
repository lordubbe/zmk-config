/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    behaviors {
        lt_spc: lt_spc {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_SPC";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    combos {
        compatible = "zmk,combos";

        Layout-Qwerty {
            bindings = <&to 0>;
            key-positions = <1 2 4 3>;
        };

        Layout-ColemakDH {
            bindings = <&to 2>;
            key-positions = <25 26 27 28>;
        };

        Toggle-NUM_PAD {
            bindings = <&tog 6>;
            key-positions = <39 38>;
        };

        lambda-combo {
            bindings = <&lambda>;
            key-positions = <9 10 8>;
        };

        gaming-toggle {
            bindings = <&tog 1>;
            key-positions = <36 41 40 37>;
        };

        left-parenthesis {
            bindings = <&kp LS(N8)>;
            key-positions = <19 20>;
        };

        right-parenthesis {
            bindings = <&kp LS(N9)>;
            key-positions = <20 21>;
        };

        left-bracket {
            bindings = <&kp RA(N8)>;
            key-positions = <7 8>;
        };

        right-bracket {
            bindings = <&kp RA(N9)>;
            key-positions = <8 9>;
        };

        left-brace {
            bindings = <&kp RA(N7)>;
            key-positions = <31 32>;
        };

        right-brace {
            bindings = <&kp RA(N0)>;
            key-positions = <32 33>;
        };

        parentheses {
            bindings = <&parentheses>;
            key-positions = <19 20 21>;
        };

        brackets {
            bindings = <&brackets>;
            key-positions = <7 8 9>;
        };

        braces {
            bindings = <&braces>;
            key-positions = <31 32 33>;
        };

        select-current {
            bindings = <&select_current>;
            key-positions = <11 23 35>;
        };

        less-than {
            bindings = <&kp NUBS>;
            key-positions = <18 19>;
        };

        more-than {
            bindings = <&kp LS(NUBS)>;
            key-positions = <21 22>;
        };

        delete-alt-backspace {
            bindings = <&kp DELETE>;
            key-positions = <10 11>;
        };

        email {
            bindings = <&email>;
            key-positions = <10 9 11>;
        };
    };

    macros {
        lambda: lambda {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(NUMBER_0) &kp LS(NON_US_BSLH)>;
            label = "LAMBDA";
        };

        parentheses: parentheses {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(N8) &kp LS(N9) &kp LEFT_ARROW>;
            label = "PARENTHESES";
        };

        brackets: brackets {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(N8) &kp RA(N9) &kp LEFT_ARROW>;
            label = "BRACKETS";
        };

        braces: braces {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(N7) &kp RA(N0) &kp LEFT_ARROW>;
            label = "BRACES";
        };

        select_current: select_current {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(RIGHT) &kp LS(LC(LEFT))>;
            label = "SELECT_CURRENT";
        };

        email: email {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp J &kp A &kp C &kp O &kp B &kp L &kp Y &kp N &kp G &kp G &kp A &kp A &kp R &kp D &kp O &kp L &kp S &kp E &kp N &kp RA(NUMBER_2) &kp H &kp O &kp T &kp M &kp A &kp I &kp L &kp DOT &kp C &kp O &kp M>;
            label = "EMAIL";
            wait-ms = <(-1)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&mt ESC TAB  &kp Q  &kp W  &kp E         &kp R     &kp T              &kp Y      &kp U          &kp I        &kp O    &kp P     &kp LEFT_BRACKET
&kp LSHFT    &kp A  &kp S  &kp D         &kp F     &kp G              &kp H      &kp J          &kp K        &kp L    &kp SEMI  &kp SQT
&kp LCTRL    &kp Z  &kp X  &kp C         &kp V     &kp B              &kp N      &kp M          &kp COMMA    &kp DOT  &kp FSLH  &mo 4
                           &kp LEFT_WIN  &kp LALT  &lt_spc 3 SPACE    &kp SPACE  &kp BACKSPACE  &lt 5 ENTER
            >;
        };

        GAMING {
            bindings = <
&trans  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5       &kp N6  &kp N7  &kp N8  &kp N9  &trans  &trans
&trans  &kp Q   &kp W   &kp E   &kp R   &kp F        &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp A   &kp S   &kp D   &kp C   &kp V        &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &kp SPACE    &trans  &trans  &trans
            >;
        };

        Colemak-DH {
            bindings = <
&trans  &kp Q  &kp W  &kp F   &kp P   &kp B     &kp J   &kp L   &kp U      &kp Y    &trans    &trans
&trans  &kp A  &kp R  &kp S   &kp T   &kp G     &kp M   &kp N   &kp E      &kp I    &kp O     &kp LEFT_BRACKET
&trans  &kp Z  &kp X  &kp C   &kp D   &kp V     &kp K   &kp H   &kp COMMA  &kp DOT  &kp SEMI  &kp SQT
                      &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        NUM {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans     &kp N1  &kp N2    &kp N3      &kp N4   &kp N5     &kp N6  &kp N7  &kp N8  &kp N9  &kp N0   &kp MINUS
&trans     &kp F1  &kp F2    &kp F3      &kp F4   &kp F5     &kp F6  &kp F7  &kp F8  &kp F9  &kp F10  &kp F11
&kp LSHFT  &trans  &kp LALT  &kp LSHIFT  &kp F12  &kp F11    &trans  &trans  &trans  &trans  &trans   &kp F12
                             &trans      &trans   &trans     &trans  &trans  &trans
            >;
        };

        SYM {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp LS(NUMBER_1)  &kp RA(NUMBER_2)  &trans            &kp RA(NUMBER_4)  &kp LS(NUMBER_5)    &kp SLASH  &kp RA(NUMBER_8)  &kp RA(NUMBER_9)  &kp LS(NUBS)  &kp RA(RIGHT_BRACKET)  &kp DELETE
&trans  &trans            &kp LS(NUMBER_0)  &kp SLASH         &kp MINUS         &kp LS(NUMBER_6)    &kp NUBS   &kp LS(NUMBER_8)  &kp LS(NUMBER_9)  &kp LS(NUBS)  &kp BSLH               &kp EQUAL
&trans  &trans            &trans            &kp LS(NUMBER_7)  &kp PIPE          &kp RA(EQUAL)       &kp GRAVE  &kp RA(NUMBER_7)  &kp RA(NUMBER_0)  &trans        &kp LC(LA(NUBS))       &kp TILDE
                                            &trans            &trans            &trans              &trans     &trans            &none
            >;
        };

        NAV {
            bindings = <
&bt BT_CLR_ALL  &bt BT_SEL 0  &bt BT_SEL 1     &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp PG_UP  &kp HOME        &kp UP_ARROW    &kp END          &trans  &trans
&trans          &trans        &kp PRINTSCREEN  &trans        &trans        &trans          &kp PG_DN  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans  &trans
&trans          &trans        &trans           &trans        &trans        &out OUT_TOG    &trans     &trans          &trans          &trans           &trans  &trans
                                               &bt BT_CLR    &trans        &trans          &trans     &trans          &trans
            >;
        };

        NUM_PAD {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp N7  &kp N8  &kp N9  &kp LS(N7)  &kp FSLH
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp N4  &kp N5  &kp N6  &kp PIPE    &kp MINUS
&trans  &trans  &trans  &trans  &trans  &trans    &kp N0  &kp N1  &kp N2  &kp N3  &kp DOT     &kp LALT
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        layer_7 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
